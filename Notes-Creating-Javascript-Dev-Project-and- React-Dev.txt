Javascript Cheat Sheets 

   1. Template Literal Syntax: console.log(`Hello ${firstName} ${lastName}`);

   2. To Run JavaScript file in VSCode 
        - click "Run anf Debug" icon on the left side 
        - click hyperlink "create a launch.json" file   
          --> select a "Debugger" --> Select node.js (this is the javscript we are 
          going to use in this course) --> a launch.json is created. Close this file
          with no modifications.
        - go back and click "Run and Debug" action again --> Click "Launch" 

   3. Javascript Syntax, variables and data types
        - https://app.pluralsight.com/ilx/video-courses/f4ccfaf2-29f8-416e-bb5d-34664ca1f136/c72fe2df-fa57-4b7e-b5a1-b19aee14c311/563b3d89-4f91-47c2-af63-e843a6d5ef48
      
        - demo: C:\_AMyReactDev\chitojavascriptdev\fundamentals-js-Tucker-28Feb2023\03-syntax-variables-and-data-types\demos\fundamentals-javascript-m3-exercise-files
  
   3. Javascript Classes
        - https://app.pluralsight.com/ilx/video-courses/f4ccfaf2-29f8-416e-bb5d-34664ca1f136/c72fe2df-fa57-4b7e-b5a1-b19aee14c311/daf918cf-522f-4602-9b5d-0f132b46c5d4
       
        - demo: C:\_AMyReactDev\chitojavascriptdev\fundamentals-js-Tucker-28Feb2023\03-syntax-variables-and-data-types\demos\fundamentals-javascript-m3-exercise-files\classes.js
        - https://tuck.cc/mdn-class

        - there are two ways to create classes in Javascript:
            1. Declaration
                class Rectangle {
                  constructor(height, width) {
                     this.height = height;
                     this.width = width;
                  }
               }
            2. Expression
               // Expression; the class has its own name
               const Rectangle = class Rectangle2 {
               constructor(height, width) {
                  this.height = height;
                  this.width = width;
               }
               };


            //here Component is a Javascript class, that's
            //why the render() method is mandatory in React class
            //components. render() in React Component from the imported 
            //React package instructs you to use it for displaying something 
            //in the browser.
            class App extends Component {
            render() {
                return (
                    <div>
                        <h1>Welcome to React</h1>
                    </div>
                )
            }
            }

            export default App;

   4. Arrow functions in React  (introduced in ES6)
       JavaScript arrow functions are often used in React applications 
    for keeping the code concise and readable. I love them, teach 
    them early, but always try to refactor my functions from JavaScript 
    ES5 to ES6 functions along the way. 


   5. Keywords Defining Variables:
        var - old way of defining a variable. Don't use it anymore 
              Variables declared by var are available 
              throughout the function in which they're declared.
        let - defines a variable. But you can change the value later.
              Variables declared by let are only available inside the 
              block where they're defined. 
        const - defines a variable. Can't change it later.

   5. JavaScript Object - https://tuck.cc/mdn-object
         - https://app.pluralsight.com/ilx/video-courses/f4ccfaf2-29f8-416e-bb5d-34664ca1f136/c72fe2df-fa57-4b7e-b5a1-b19aee14c311/0d487f1b-374f-40e8-a7dc-fc0113a22457
         - objects are passe by reference
         - demo - C:\_AMyReactDev\chitojavascriptdev\demoCreatingJavasciptObject


   ==============================================================
    5 - Link to Course: JavaScript ES6  
   https://app.pluralsight.com/ilx/video-courses/fbbac3b2-0e56-464b-92f2-0b877f92f12c/c2709893-6776-4589-bc6c-699eeb71d6a5/9cffc5ca-3327-4791-8bfb-ebefe626c66d

    1. Entering React after learning JavaScript 
     -https://www.robinwieruch.de/javascript-fundamentals-react-requirements/#entering-react-after-learning-javascript

    2. Javascript: Getting Started Mark Zamoyta 21March2021 
      - https://app.pluralsight.com/library/courses/javascript-getting-started/table-of-contents


    3. Javascript fundamentals by David Tucker 23Feb2023 
      - https://app.pluralsight.com/library/courses/fundamentals-javascript/table-of-contents

       - RECOMMENDED DOCUMENTATION TO USE: HTTPS://TUCK.CC/JS-STRING 
       - shift +F5 to stop debugging

        - to debug individual file: create Launch.json: run and  debug --> Add Configuration from DD 
        --> Node.JS (Launch.JSON will be created)

   

     4. debugging JavaScript  
         - https://app.pluralsight.com/ilx/video-courses/f4ccfaf2-29f8-416e-bb5d-34664ca1f136/cfe04c97-e00e-497f-8ac2-27bd2ee60955/b34c2251-d320-4e91-99e6-f2e33d66efad

 =========================
    Special Notes: 
 =========================
     For using ESLint go to: https://app.pluralsight.com/ilx/video-courses/f4ccfaf2-29f8-416e-bb5d-34664ca1f136/1b527686-e150-4c3a-8690-6d7eea1f0bbb/5528f1ea-3a46-4d3f-b8aa-700de290951b
      - from VSCode install EWSlint extension 
      - create ESLLint rules as an NPM package susch as airbnb
      - Airbnb's configuration is called eslint-config-airbnb. 
        to install go to: https://www.npmjs.com/package/eslint-config-airbnb
        if using npm 5+, use this shortcut

           npx install-peerdeps --dev eslint-config-airbnb
           
      - after installation we could use Eslint to generate a config for us.
        but in this case I'll just create one for our app.
           - create file .eslintrc and extend airbnb like this:
              {
                "extends": "airbnb"
              }
      - now go to the terminal and run: 
          npx eslint .  (dot means run it in the current directory)
         
          the above command will display list of errors. to fix: 
             npx eslint . --fix 

      - to fix "ESLint Parsing error: Unexpected token {}" add to eslintrc another parser:
             "parser": "@babel/eslint-parser" 
        run npx eslint . again
    
   
   Link to Unit Testing Course in PS: 
      - Link to sub course on Tucker's unit testing in Javascript 
          - https://app.pluralsight.com/ilx/video-courses/clips/7bfd69a4-6307-4991-8f20-2379c9fa4a4e
    

      - https://tuck.cc/imicro - - example of an app running a unit Testing


   Next Step in Learning Javascript:
      - Arrays and Objects in JavaScript by Matt Henry
         https://app.pluralsight.com/ilx/video-courses/clips/fb334ebf-10d6-4050-b355-a16fa61ebc93

      -  
      - Javascript Unit Testing with Jest by Gabriel McNeilly pluralsight
         https://app.pluralsight.com/ilx/video-courses/clips/c13a4cca-dc26-44e2-af20-dfac8dcfdc0b

   2. Source Control in VSCode
       - https://code.visualstudio.com/docs/sourcecontrol/overview

   3. Direct links 
       - debugging 
          https://app.pluralsight.com/ilx/video-courses/f4ccfaf2-29f8-416e-bb5d-34664ca1f136/cfe04c97-e00e-497f-8ac2-27bd2ee60955/b34c2251-d320-4e91-99e6-f2e33d66efad

       - browser debugging 
          https://code.visualstudio.com/docs/nodejs/browser-debugging
          
       - VS Code Editor Debugging 
           https://code.visualstudio.com/docs/editor/debugging

       - Using React in VS Code Created by create-react-app generator 
          - https://code.visualstudio.com/docs/nodejs/reactjs-tutorial

1. Creating Javascript Development Project:
   https://app.pluralsight.com/library/courses/fundamentals-javascript/table-of-contents
    
     - install presrequisites - https://app.pluralsight.com/ilx/video-courses/f4ccfaf2-29f8-416e-bb5d-34664ca1f136/cfe04c97-e00e-497f-8ac2-27bd2ee60955/e7e81fb1-b782-4b35-9a04-dc77926f9d08
        - install node.,js
        - install VS code
        

2. To create your own Javascript development for React from SCRATCH 
   See Pluralsight https://app.pluralsight.com/ilx/video-courses/cb023a50-6da5-40b7-8b24-ed3d0a140da0/54a012ec-d986-42d2-b98c-f287354c99e6/7bb43cdc-a524-4133-b4b6-785a7737edd4

   The always-recent guide to creating a development environment for Node 
   and React (with Babel and Webpack)
     
      Go to https://jscomplete.com/reactful to see the latest steps to follow.
      This is the link to "The always-recent guide to creating a React development 
      environment for Node  and React (with Babel and Webpack)". The following are the 
      steps.

      (1) Initializing 
          - create empty directory and init it with package.json. this is the file used 
            in node.js project to store general info about the project (like its name version, etc)
            and tracks what dependencies the project needs. Create this file using npm init.
                    
            mkdir reactful 
            cd reactful
            npm init or npm init -Y  - once the command is done you should have 
              package.json in the directory
        
      (2) Install main dependencies

          - Step 1: Add Express to the project: 
                   npm i Express        

              This command will download the express npm package and place it under
              a node_modules folder (which it will create because express is the 
              first package weâ€™re adding). The command will also save this dependency
              to your package.json file.

          - Step2: Next install frontend dependencies by running the 
                     following commands. While the "react and react-dom" 
                     packages are not really needed in production because 
                     they get bundled into a single file, this guide assumes 
                     that you deploy your "unbundled code" to production and 
                     bundle things there. If you want to bundle things in 
                     development and push your bundled files to production, 
                     you can install these packages - and most of whatâ€™s 
                     coming next - as development dependencies.
               
                npm i react react-dom 
                    these 2 packages are the actual packages that contain the 
                    the React core library and the react core ReactDOM library
                    that we need to use to Render a react application to the DOM 
                    or when we actually use server-side rendering as well.

                    
           - Step 3: "Webpack is a module binder". Since youâ€™ll be writing your 
                code in multiple modules (files) 
                and it will depend on other modules (like React), you need a module 
                bundler to translate all these modules into something that can work in 
                all browsers today. You can use Webpack for that job. 
                The packages you need to install now are:

                    "npm i webpack webpack-cli" 

                The "webpack-cli" package provides the webpack command, which you can use to 
                bundle your modules. 

                Install loaders. Webpack is just a generic module bundler. 
                You need to configure it with loaders to transform code from one state 
                into the other. For example, you need to transform Reactâ€™s JSX code 
                into Reactâ€™s API calls. The tool for that job is Babel.

             - Step 4:  Install the following loader to make Babel do its magic:
                  "npm i babel-loader @babel/core @babel/node @babel/preset-env @babel/preset-react"

      (3) Install Development dependencies. These are dependencies you don't need in production.

            npm i -g -nodemon - This package will make the nodemon command available in your project. 
                            Nodemon runs your Node server in a wrapper process that monitors the main 
                            process and automatically restarts it when files are saved to the disk. Simple and powerful!

            npm i -D eslint @babel/eslint-parser eslint-plugin-react eslint-plugin-react-hooks

                To configure ESLint, you need to add a .eslintrc.js file in the root of the project. 
                This file will naturally depend on your code style preferences, but definitely 
                start it with the recommended configurations and then customize them as needed
            
            npm i -D jest babel-jest react-test-renderer - add a testing library. The most popular is JEST


       (4) Now Configure your own environment
           https://app.pluralsight.com/ilx/video-courses/cb023a50-6da5-40b7-8b24-ed3d0a140da0/54a012ec-d986-42d2-b98c-f287354c99e6/3ef29b50-8430-4456-a9f5-b4ec6810bf1c

           Step 1: Configure ESLint, you need to add a .eslintrc.js file in the root of the project.
                    .eslintrc.js and add the following code:
                      module.exports = {
                    parser: "@babel/eslint-parser",
                    env: {
                        browser: true,
                        commonjs: true,
                        es6: true,
                        node: true,
                        jest: true,
                    },
                    parserOptions: {
                        ecmaVersion: 2020,
                        ecmaFeatures: {
                        impliedStrict: true,
                        jsx: true,
                        },
                        sourceType: "module",
                    },
                    plugins: ["react", "react-hooks"],
                    extends: [
                        "eslint:recommended",
                        "plugin:react/recommended",
                        "plugin:react-hooks/recommended",
                    ],
                    settings: {
                        react: {
                        version: "detect",
                        },
                    },
                    rules: {
                        "react/prop-types": "off",
                        "react/react-in-jsx-scope": "off",

                        // You can do more rule customizations here...
                    },
                    };

                You should configure your editor to highlight any ESLint issues for you as you type. 
                All the major editors today have plugins to do that. You should also make your editor 
                auto-format code for you on save. Prettier is a great option for that and it works 
                well with ESLint.

           Step 2: You should configure your editor (VSCode) to highlight any ESLint issues for 
            you as you type. All the major editors today have plugins to do that. 
            You should also make your editor auto-format code for you on save. 
            Prettier is a great option for that and it works well with ESLint

           Step 3: Install testing library.  
            The most popular testing library thatâ€™s usually used with React is Jest. 
            Youâ€™ll also need babel-jest and a test renderer like react-test-renderer:

                npm i -D jest babel-jest react-test-renderer (run this later)

          Step 4: Creating an initial directory structure
            This really depends on your style and preferences, but a simple 
            structure would be something like:

                    reactful/
                    dist/
                        main.js
                    src/
                        index.js
                        components/
                        app.js
                        server/
                        server.js

                Note how I created a separate server directory for the backend code. 
                Itâ€™s always a good idea to separate code that you run in your trusted 
                private backends from code that is to be run on public clients.

                Run the following commands:
                    md dist
                    md src 
                    md src/components
                    md src/server

            Step 5:  Configuring Webpack and Babel
                To configure Babel to compile JSX and modern JavaScript code, 
                create a babel.config.js file under the root of the project 
                and put the following module.exports object in it:
    

                        module.exports = {
                        presets: [
                            "@babel/preset-env",
                            ["@babel/preset-react", { "runtime": "automatic" }]
                        ],
                        };

                To configure Webpack to bundle your application into a single bundle file, create a 
                webpack.config.js file under the root of the project and put the following module.exports object in it:

                    webpack.config.js

                    module.exports = {
                    module: {
                        rules: [
                        {
                            test: /\.js$/,
                            exclude: /node_modules/,
                            use: {
                            loader: "babel-loader",
                            },
                        },
                        ],
                    },
                    };

            Step 6: Creating npm scripts for development
                In your package.json file, there is a scripts section. If you generated the file with 
                the npm init defaults youâ€™ll have a placeholder "test" script in there. 
                Change that to work with Jest:
                Add 2 more scripts. 
                First a script to run the server file with Nodemon you can name the script anything.
                You can call it dev:server 
                    dev:server": "nodemon --exec babel-node src/server/server.js --ignore dist/

                Second: Simple runner for webpack. You can call it dev:bundler
                    "dev:bundler": "webpack -w --mode=development"
                    The -w flag in the command above is to run Webpack in watch mode as well and 
                    the --mode=development flag is to make Webpack generate a development-friendly bundle.
    
                        In prod change develpment to --mode=production in production.

                // In package.json
                    scripts: {
                     "test": "jest",
                     dev:server": "nodemon --exec babel-node src/server/server.js --ignore dist/",
                    "dev:bundler": "webpack -w --mode=development"
                    }

            7. Testing everything with a sample application:
            
                Step 1: At this point, you are ready for your own code. If you followed 
                    the exact configurations above, youâ€™ll need to place your 
                    ReactDOM.render call (or .hydrateRoot for SSR code) 
                    in src/index.js and serve dist/main.js in your root HTML response.
                    Here is a sample server-side ready React application that you can test with:

                    Create:
                        index.js in src/
                        app.js in src/component

                        Copy the provided sample code in app.js and index.js

                    Create:
                        server.js in src/server/ 
                        copy the provided sample code to server.js

                Step 2: Test. Open 2 terminals and run the following on separate terminals.     
                    $ npm run dev:server
                    $ npm run dev:bundler

                    Then open up your browser on http://localhost:4242/, you should see the React 
                    application rendered. This application should also be rendered if you disable 
                    JavaScript in your browser! 

                   Reactful
                     - https://app.pluralsight.com/ilx/video-courses/cb023a50-6da5-40b7-8b24-ed3d0a140da0/54a012ec-d986-42d2-b98c-f287354c99e6/37b6569b-3721-4cc9-923e-cfc111938b6e


3. Creating your project on your own Javascript Development Environment using library 
   called "ReactFul" created by the course author.

    (1) Create the project star-match
          npx reactful star-match  - this creates a bare bone project repo that is 
                                     fully configures for server-side render. All the 
                                     files are there ready for you to customize it.

          do code . 

     (2)


===================
 12: Read more about JavaScript array destructuring
      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#array_destructuring

